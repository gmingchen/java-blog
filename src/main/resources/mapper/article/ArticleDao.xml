<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.slipper.modules.article.dao.ArticleDao">

    <resultMap type="com.slipper.modules.article.model.dto.ArticleDto" id="articleMap">
        <result property="id" column="id"/>
        <result property="title" column="title"/>
        <result property="type" column="type"/>
        <result property="content" column="content"/>
        <result property="describe" column="describe"/>
        <result property="categoryId" column="category_id"/>
        <result property="cover" column="cover"/>
        <result property="categoryName" column="category_name"/>
        <result property="praise" column="praise"/>
        <result property="comment" column="comment"/>
        <result property="read" column="read"/>
        <result property="recommended" column="recommended"/>
        <result property="commentable" column="commentable"/>
        <result property="published" column="published"/>
        <result property="publishedAt" column="published_at"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
        <collection property="tags" column="{id = id}" select="queryTag">
        </collection>
    </resultMap>

<!--    IPage<ArticleDto> queryPage(-->
<!--    Page<ArticleDto> page,-->
<!--    @Param("start") String start,-->
<!--    @Param("end") String end,-->
<!--    @Param("title") String title,-->
<!--    @Param("categoryIds") List categoryIds,-->
<!--    @Param("tagIds") List tagIds,-->
<!--    @Param("recommended") Integer recommended,-->
<!--    @Param("commentable") Integer commentable,-->
<!--    @Param("published") Integer published-->
<!--    );-->

    <select id="queryTag" resultType="com.slipper.modules.tag.model.dto.TagDto">
        SELECT t.id, t.name
        FROM article__tag AS a_t
        LEFT JOIN tag AS t on t.id = a_t.tag_id
        WHERE a_t.article_id = #{id}
    </select>

    <select id="queryPage" resultMap="articleMap">
        SELECT a.id, a.title, a.type, a.describe, a.cover, a.recommended, a.commentable, a.published, a.read, a.published_at, a.created_at, a.updated_at,
               a.category_id, c.name AS category_name,
                (SELECT count(*) FROM praise AS p WHERE p.article_id = a.id) AS praise,
                (SELECT count(*) FROM comment AS c WHERE c.article_id = a.id and c.deleted = 0) AS comment
        FROM article AS a
        LEFT JOIN category AS c ON c.id = a.category_id
        <where>
            a.deleted = 0
            <if test="title != null and title !=''">
                AND a.title LIKE "%${title}%"
            </if>
            <if test="categoryIds != null and categoryIds.size() > 0">
                AND a.category_id IN
                <foreach collection="categoryIds" item="item" open="(" separator="," close=")">
                    ${item}
                </foreach>
            </if>
            <if test="recommended != null">
                AND a.recommended = #{recommended}
            </if>
            <if test="commentable != null">
                AND a.commentable = #{commentable}
            </if>
            <if test="published != null">
                AND a.published = #{published}
            </if>
            <if test="start != null and start != ''">
                AND DATE_FORMAT(a.created_at,'%Y-%m-%d') <![CDATA[ >= ]]> DATE_FORMAT(#{start},'%Y-%m-%d')
            </if>
            <if test="end != null and end != ''">
                AND DATE_FORMAT(a.created_at,'%Y-%m-%d') <![CDATA[ <= ]]> DATE_FORMAT(#{end},'%Y-%m-%d')
            </if>
        </where>
        ORDER BY a.created_at DESC
    </select>

<!--    ArticleDto queryInfo(@Param("id") int id);-->
    <select id="queryInfo" resultMap="articleMap">
        SELECT a.id, a.title, a.type, a.content, a.describe, a.cover, a.recommended, a.commentable, a.published, a.published_at, a.created_at, a.updated_at,
               a.category_id, c.name AS category_name
        FROM article AS a
        LEFT JOIN category AS c ON c.id = a.category_id
        WHERE a.id = #{id}
    </select>

<!--    List<ArticleBasicDto> queryLatest(@Param("limit") int limit);-->
    <select id="queryLatest" resultType="com.slipper.modules.article.model.dto.ArticleBasicDto">
        SELECT id, title, `describe`, cover, published_at, created_at, updated_at
        FROM article
        WHERE published = 1 AND deleted = 0
        ORDER BY published_at DESC
        LIMIT #{limit}
    </select>

<!--    Long queryAllRead();-->
    <select id="queryAllRead" resultType="Long">
        SELECT IFNULL(sum(`read`), 0)
        FROM article
    </select>

<!--    List<ArticleDto> queryLatestPublished(@Param("limit") int limit);-->
    <select id="queryLatestPublished" resultMap="articleMap">
        SELECT a.id, a.title, a.type, a.describe, a.cover, a.recommended, a.commentable, a.published, a.read, a.published_at, a.created_at, a.updated_at,
                a.category_id, c.name AS category_name,
                (SELECT count(*) FROM praise AS p WHERE p.article_id = a.id) AS praise,
                (SELECT count(*) FROM comment AS ct WHERE ct.article_id = a.id and ct.deleted = 0) AS comment
        FROM article AS a
        LEFT JOIN category AS c ON c.id = a.category_id
        WHERE a.deleted = 0 and a.published = 1
        ORDER BY a.published_at DESC
        LIMIT #{limit}
    </select>

<!--    List<ArticleBasicDto> queryRecommended(@Param("limit") int limit);-->
    <select id="queryRecommended" resultType="com.slipper.modules.article.model.dto.ArticleBasicDto">
        SELECT id, title, `describe`, cover, published_at, created_at, updated_at
        FROM article
        WHERE published = 1 AND recommended = 1 AND deleted = 0
        ORDER BY published_at DESC
        LIMIT #{limit}
    </select>

<!--    List<ArticleBasicDto> queryRead(@Param("limit") int limit);-->
    <select id="queryRead" resultType="com.slipper.modules.article.model.dto.ArticleBasicDto">
        SELECT id, title, `describe`, cover, published_at, created_at, updated_at
        FROM article
        WHERE published = 1 AND deleted = 0
        ORDER BY `read` DESC , published_at DESC
        LIMIT #{limit}
    </select>

<!--    List<ArticleBasicDto> querySearchSuggest(@Param("keyword") String keyword, @Param("limit") int limit);-->
    <select id="querySearchSuggest" resultType="com.slipper.modules.article.model.dto.ArticleBasicDto">
        SELECT id, title, `describe`, cover, published_at, created_at, updated_at
        FROM article
        WHERE published = 1 AND deleted = 0
        <if test="keyword != null and keyword !=''">
            AND (title LIKE "%${keyword}%" or `describe` LIKE "%${keyword}%" or content LIKE "%${keyword}%")
        </if>
        ORDER BY recommended DESC, `read` DESC , published_at DESC, created_at DESC
        LIMIT #{limit}
    </select>

<!--    ArticleDto queryDetails(@Param("id") int id);-->
    <select id="queryDetails" resultMap="articleMap">
        SELECT a.id, a.title, a.type, a.describe, a.cover, a.content, a.recommended, a.commentable, a.published, a.read, a.published_at, a.created_at, a.updated_at,
        a.category_id, c.name AS category_name,
        (SELECT count(*) FROM praise AS p WHERE p.article_id = a.id) AS praise,
        (SELECT count(*) FROM comment AS c WHERE c.article_id = a.id and c.deleted = 0) AS comment
        FROM article AS a
        LEFT JOIN category AS c ON c.id = a.category_id
        WHERE a.id = #{id} AND a.deleted = 0 AND a.published = 1
    </select>

<!--    void readingPlusOne(@Param("id") int id);-->
    <update id="readingPlusOne">
        UPDATE article
        SET `read` = `read` + 1
        WHERE id = #{id}
    </update>

<!--    IPage<ArticleDto> querySearch(-->
<!--    Page<ArticleDto> page,-->
<!--    @Param("keyword") String keyword,-->
<!--    @Param("categoryId") Integer categoryId-->
<!--    );-->
    <select id="querySearch" resultMap="articleMap">
        SELECT a.id, a.title, a.type, a.describe, a.cover, a.recommended, a.commentable, a.published, a.read, a.published_at, a.created_at, a.updated_at,
        a.category_id, c.name AS category_name,
        (SELECT count(*) FROM praise AS p WHERE p.article_id = a.id) AS praise,
        (SELECT count(*) FROM comment AS c WHERE c.article_id = a.id and c.deleted = 0) AS comment
        FROM article AS a
        LEFT JOIN category AS c ON c.id = a.category_id
        WHERE a.published = 1 AND a.deleted = 0
        <if test="keyword != null and keyword !=''">
            AND (a.title LIKE "%${keyword}%" or a.describe LIKE "%${keyword}%" or a.content LIKE "%${keyword}%")
        </if>
        <if test="categoryId != null">
            AND a.category_id = #{categoryId}
        </if>
        ORDER BY a.category_id ASC, a.recommended DESC, a.read DESC , a.published_at DESC, a.created_at DESC
    </select>

</mapper>